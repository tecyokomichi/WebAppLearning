// Code generated by goa v3.5.2, DO NOT EDIT.
//
// sampleApi service
//
// Command:
// $ goa gen sampleApi/design

package sampleapi

import (
	"context"
	sampleapiviews "sampleApi/gen/sample_api/views"
)

// Sample API Service
type Service interface {
	// Show implements show.
	Show(context.Context, *ShowPayload) (res *User, err error)
}

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "sampleApi"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [1]string{"show"}

// ShowPayload is the payload type of the sampleApi service show method.
type ShowPayload struct {
	// ID
	ID int
}

// User is the result type of the sampleApi service show method.
type User struct {
	// ID
	ID *int
	// Email
	Email *string
	// Name
	Name *string
}

// NewUser initializes result type User from viewed result type User.
func NewUser(vres *sampleapiviews.User) *User {
	return newUser(vres.Projected)
}

// NewViewedUser initializes viewed result type User from result type User
// using the given view.
func NewViewedUser(res *User, view string) *sampleapiviews.User {
	p := newUserView(res)
	return &sampleapiviews.User{Projected: p, View: "default"}
}

// newUser converts projected type User to service type User.
func newUser(vres *sampleapiviews.UserView) *User {
	res := &User{
		ID:    vres.ID,
		Email: vres.Email,
		Name:  vres.Name,
	}
	return res
}

// newUserView projects result type User to projected type UserView using the
// "default" view.
func newUserView(res *User) *sampleapiviews.UserView {
	vres := &sampleapiviews.UserView{
		ID:    res.ID,
		Email: res.Email,
		Name:  res.Name,
	}
	return vres
}
